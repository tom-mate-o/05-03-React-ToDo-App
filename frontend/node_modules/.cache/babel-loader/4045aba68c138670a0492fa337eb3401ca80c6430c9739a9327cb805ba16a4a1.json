{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\OneDrive\\\\Dokumente\\\\GitHub\\\\_Fullstack-2023-2_meineProjekte\\\\0503todoapp\\\\src\\\\components\\\\takeInputvalueAndReturn.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff79c6\"\n    },\n    text: {\n      primary: \"#ffff\",\n      secondary: \"#ffff\"\n    }\n  }\n});\nexport default function InputAndReturn({\n  setTodos\n}) {\n  _s();\n  // variable todoTextRef mit useRef() erstellen\n  const todoTextRef = useRef();\n  function Input({\n    setTodos\n  }) {\n    const newTodo = todoTextRef.current.value;\n    if (newTodo.trim() !== \"\") {\n      // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\n      setTodos(prevTodos => [...prevTodos, newTodo]);\n      // textfeld danach wieder leeren\n      todoTextRef.current.value = \"\";\n    }\n  }\n\n  // clickLog() function bei Button onClick\n  function clickLog(e) {\n    e.preventDefault();\n    console.log(\"click\");\n    // console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\n    console.log(todoTextRef.current.value);\n    // textfeld danach wieder leeren\n    todoTextRef.current.value = \"\";\n    Input({\n      setTodos\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"inputField\",\n      children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          inputRef: todoTextRef,\n          className: \"input\",\n          id: \"filled-basic\",\n          label: \"Add ToDo...\",\n          variant: \"filled\",\n          color: \"primary\",\n          inputProps: {\n            style: {\n              color: \"#ff79c6\"\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => clickLog(e),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(InputAndReturn, \"k5i9kRJXulbx+J272MHN3NZYeu0=\");\n_c = InputAndReturn;\nvar _c;\n$RefreshReg$(_c, \"InputAndReturn\");","map":{"version":3,"names":["React","useRef","TextField","createTheme","ThemeProvider","jsxDEV","_jsxDEV","Fragment","_Fragment","theme","palette","primary","main","text","secondary","InputAndReturn","setTodos","_s","todoTextRef","Input","newTodo","current","value","trim","prevTodos","clickLog","e","preventDefault","console","log","children","className","inputRef","id","label","variant","color","inputProps","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/src/components/takeInputvalueAndReturn.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff79c6\",\r\n    },\r\n    text: {\r\n      primary: \"#ffff\",\r\n      secondary: \"#ffff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function InputAndReturn({setTodos}) {\r\n  // variable todoTextRef mit useRef() erstellen\r\n  const todoTextRef = useRef();\r\n\r\n  function Input({setTodos}){\r\n    const newTodo = todoTextRef.current.value;\r\n    if (newTodo.trim() !== \"\") {\r\n      // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\r\n      setTodos((prevTodos) => [...prevTodos, newTodo]);\r\n      // textfeld danach wieder leeren\r\n      todoTextRef.current.value = \"\";\r\n    }\r\n  }\r\n\r\n\r\n  // clickLog() function bei Button onClick\r\n  function clickLog(e) {\r\n    e.preventDefault();\r\n    console.log(\"click\");\r\n    // console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\r\n    console.log(todoTextRef.current.value);\r\n    // textfeld danach wieder leeren\r\n    todoTextRef.current.value = \"\";\r\n    Input({setTodos});\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <form className=\"inputField\">\r\n        <ThemeProvider theme={theme}>\r\n          {/* ref hook todoTextRef im Textfield */}\r\n          <TextField inputRef={todoTextRef} className=\"input\" id=\"filled-basic\" label=\"Add ToDo...\" variant=\"filled\" color=\"primary\" inputProps={{ style: { color: \"#ff79c6\" } }}/>\r\n        </ThemeProvider>\r\n        {/* bei onClick wird clickLog() ausgeführt */}\r\n        <button onClick={(e)=>clickLog(e)}>+</button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAASC,WAAW,EAAEC,aAAa,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAGlE,MAAMC,KAAK,GAAGN,WAAW,CAAC;EACxBO,OAAO,EAAE;IACPC,OAAO,EAAE;MACPC,IAAI,EAAE;IACR,CAAC;IACDC,IAAI,EAAE;MACJF,OAAO,EAAE,OAAO;MAChBG,SAAS,EAAE;IACb;EACF;AACF,CAAC,CAAC;AAEF,eAAe,SAASC,cAAcA,CAAC;EAACC;AAAQ,CAAC,EAAE;EAAAC,EAAA;EACjD;EACA,MAAMC,WAAW,GAAGjB,MAAM,CAAC,CAAC;EAE5B,SAASkB,KAAKA,CAAC;IAACH;EAAQ,CAAC,EAAC;IACxB,MAAMI,OAAO,GAAGF,WAAW,CAACG,OAAO,CAACC,KAAK;IACzC,IAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzB;MACAP,QAAQ,CAAEQ,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAEJ,OAAO,CAAC,CAAC;MAChD;MACAF,WAAW,CAACG,OAAO,CAACC,KAAK,GAAG,EAAE;IAChC;EACF;;EAGA;EACA,SAASG,QAAQA,CAACC,CAAC,EAAE;IACnBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpB;IACAD,OAAO,CAACC,GAAG,CAACX,WAAW,CAACG,OAAO,CAACC,KAAK,CAAC;IACtC;IACAJ,WAAW,CAACG,OAAO,CAACC,KAAK,GAAG,EAAE;IAC9BH,KAAK,CAAC;MAACH;IAAQ,CAAC,CAAC;EACnB;EAIA,oBACEV,OAAA,CAAAE,SAAA;IAAAsB,QAAA,eACExB,OAAA;MAAMyB,SAAS,EAAC,YAAY;MAAAD,QAAA,gBAC1BxB,OAAA,CAACF,aAAa;QAACK,KAAK,EAAEA,KAAM;QAAAqB,QAAA,eAE1BxB,OAAA,CAACJ,SAAS;UAAC8B,QAAQ,EAAEd,WAAY;UAACa,SAAS,EAAC,OAAO;UAACE,EAAE,EAAC,cAAc;UAACC,KAAK,EAAC,aAAa;UAACC,OAAO,EAAC,QAAQ;UAACC,KAAK,EAAC,SAAS;UAACC,UAAU,EAAE;YAAEC,KAAK,EAAE;cAAEF,KAAK,EAAE;YAAU;UAAE;QAAE;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5J,CAAC,eAEhBpC,OAAA;QAAQqC,OAAO,EAAGjB,CAAC,IAAGD,QAAQ,CAACC,CAAC,CAAE;QAAAI,QAAA,EAAC;MAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzC;EAAC,gBACP,CAAC;AAEP;AAACzB,EAAA,CAxCuBF,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}