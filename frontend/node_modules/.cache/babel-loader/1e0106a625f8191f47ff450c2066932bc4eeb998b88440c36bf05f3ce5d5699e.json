{"ast":null,"code":"import _toConsumableArray from\"C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useRef}from\"react\";import TextField from\"@mui/material/TextField\";import AddTaskIcon from'@mui/icons-material/AddTask';import{createTheme,ThemeProvider}from\"@mui/material/styles\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var theme=createTheme({palette:{primary:{main:\"#ff79c6\"},text:{primary:\"#ffff\",secondary:\"#ffff\"}}});export default function InputAndReturn(_ref){var todos=_ref.todos,setTodos=_ref.setTodos;// variable todoTextRef mit useRef()-hook erstellen\nvar todoTextRef=useRef();function InputValueToToDoList(){var newTodo=todoTextRef.current.value;if(newTodo.trim()!==\"\"){// Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\nsetTodos([].concat(_toConsumableArray(todos),[newTodo]));// Füge das neue To-Do dem bestehenden Array [...todos] hinzu\nlocalStorage.setItem(\"todos\",JSON.stringify([].concat(_toConsumableArray(todos),[newTodo])));//setTodos to local storage\nlocalStorage.setItem(\"todosCount\",JSON.stringify(todos.length+1));//zählt die ToDos und setzt den Wert in todosCount im local storage\ntodoTextRef.current.value=\"\";// textfeld danach wieder leeren\n}}// clickButtonThenInput() function bei Button onClick\nfunction clickButtonThenInput(e){// wird mit event ausgeführt.\ne.preventDefault();// e.preventDefault() verhindert, dass die Seite neu geladen wird\nconsole.log(\"click\");// console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\nconsole.log(todoTextRef.current.value);InputValueToToDoList();}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"form\",{className:\"inputField\",children:[/*#__PURE__*/_jsx(ThemeProvider,{theme:theme,children:/*#__PURE__*/_jsx(TextField,{inputRef:todoTextRef,className:\"input\",id:\"filled-basic\",label:\"Add ToDo...\",variant:\"filled\",color:\"primary\",inputProps:{style:{color:\"#ff79c6\"},maxLength:100}})}),/*#__PURE__*/_jsx(\"button\",{onClick:clickButtonThenInput,children:/*#__PURE__*/_jsx(AddTaskIcon,{})})]})});}","map":{"version":3,"names":["React","useRef","TextField","AddTaskIcon","createTheme","ThemeProvider","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","theme","palette","primary","main","text","secondary","InputAndReturn","_ref","todos","setTodos","todoTextRef","InputValueToToDoList","newTodo","current","value","trim","concat","_toConsumableArray","localStorage","setItem","JSON","stringify","length","clickButtonThenInput","e","preventDefault","console","log","children","className","inputRef","id","label","variant","color","inputProps","style","maxLength","onClick"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/src/components/takeInputvalueAndReturn.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport AddTaskIcon from '@mui/icons-material/AddTask';\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff79c6\",\r\n    },\r\n    text: {\r\n      primary: \"#ffff\",\r\n      secondary: \"#ffff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function InputAndReturn({todos, setTodos}) {\r\n  // variable todoTextRef mit useRef()-hook erstellen\r\n  const todoTextRef = useRef();\r\n\r\n  function InputValueToToDoList(){\r\n    const newTodo = todoTextRef.current.value;\r\n    if (newTodo.trim() !== \"\") { // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\r\n      setTodos([...todos, newTodo]); // Füge das neue To-Do dem bestehenden Array [...todos] hinzu\r\n      localStorage.setItem(\"todos\", JSON.stringify([...todos, newTodo])); //setTodos to local storage\r\n      localStorage.setItem(\"todosCount\", JSON.stringify(todos.length + 1)); //zählt die ToDos und setzt den Wert in todosCount im local storage\r\n      todoTextRef.current.value = \"\"; // textfeld danach wieder leeren\r\n    }\r\n  }\r\n\r\n\r\n  // clickButtonThenInput() function bei Button onClick\r\n  function clickButtonThenInput(e) {  // wird mit event ausgeführt.\r\n    e.preventDefault(); // e.preventDefault() verhindert, dass die Seite neu geladen wird\r\n    console.log(\"click\");\r\n    // console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\r\n    console.log(todoTextRef.current.value);\r\n    \r\n    InputValueToToDoList();\r\n  \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form className=\"inputField\">\r\n        <ThemeProvider theme={theme}>\r\n          {/* ref hook todoTextRef im Textfield */}\r\n          <TextField inputRef={todoTextRef} className=\"input\" id=\"filled-basic\" label=\"Add ToDo...\" variant=\"filled\" color=\"primary\" inputProps={{ style: { color: \"#ff79c6\" }, maxLength: 100 }}/>\r\n        </ThemeProvider>\r\n        {/* bei onClick wird clickButtonThenInput() ausgeführt */}\r\n        <button onClick={clickButtonThenInput}><AddTaskIcon/></button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"kLAAA,MAAO,CAAAA,KAAK,EAAIC,MAAM,KAAQ,OAAO,CACrC,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAC/C,MAAO,CAAAC,WAAW,KAAM,6BAA6B,CACrD,OAASC,WAAW,CAAEC,aAAa,KAAQ,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAGlE,GAAM,CAAAC,KAAK,CAAGR,WAAW,CAAC,CACxBS,OAAO,CAAE,CACPC,OAAO,CAAE,CACPC,IAAI,CAAE,SACR,CAAC,CACDC,IAAI,CAAE,CACJF,OAAO,CAAE,OAAO,CAChBG,SAAS,CAAE,OACb,CACF,CACF,CAAC,CAAC,CAEF,cAAe,SAAS,CAAAC,cAAcA,CAAAC,IAAA,CAAoB,IAAlB,CAAAC,KAAK,CAAAD,IAAA,CAALC,KAAK,CAAEC,QAAQ,CAAAF,IAAA,CAARE,QAAQ,CACrD;AACA,GAAM,CAAAC,WAAW,CAAGrB,MAAM,CAAC,CAAC,CAE5B,QAAS,CAAAsB,oBAAoBA,CAAA,CAAE,CAC7B,GAAM,CAAAC,OAAO,CAAGF,WAAW,CAACG,OAAO,CAACC,KAAK,CACzC,GAAIF,OAAO,CAACG,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAAE;AAC3BN,QAAQ,IAAAO,MAAA,CAAAC,kBAAA,CAAKT,KAAK,GAAEI,OAAO,EAAC,CAAC,CAAE;AAC/BM,YAAY,CAACC,OAAO,CAAC,OAAO,CAAEC,IAAI,CAACC,SAAS,IAAAL,MAAA,CAAAC,kBAAA,CAAKT,KAAK,GAAEI,OAAO,EAAC,CAAC,CAAC,CAAE;AACpEM,YAAY,CAACC,OAAO,CAAC,YAAY,CAAEC,IAAI,CAACC,SAAS,CAACb,KAAK,CAACc,MAAM,CAAG,CAAC,CAAC,CAAC,CAAE;AACtEZ,WAAW,CAACG,OAAO,CAACC,KAAK,CAAG,EAAE,CAAE;AAClC,CACF,CAGA;AACA,QAAS,CAAAS,oBAAoBA,CAACC,CAAC,CAAE,CAAG;AAClCA,CAAC,CAACC,cAAc,CAAC,CAAC,CAAE;AACpBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC,CACpB;AACAD,OAAO,CAACC,GAAG,CAACjB,WAAW,CAACG,OAAO,CAACC,KAAK,CAAC,CAEtCH,oBAAoB,CAAC,CAAC,CAExB,CAEA,mBACEhB,IAAA,CAAAI,SAAA,EAAA6B,QAAA,cACE/B,KAAA,SAAMgC,SAAS,CAAC,YAAY,CAAAD,QAAA,eAC1BjC,IAAA,CAACF,aAAa,EAACO,KAAK,CAAEA,KAAM,CAAA4B,QAAA,cAE1BjC,IAAA,CAACL,SAAS,EAACwC,QAAQ,CAAEpB,WAAY,CAACmB,SAAS,CAAC,OAAO,CAACE,EAAE,CAAC,cAAc,CAACC,KAAK,CAAC,aAAa,CAACC,OAAO,CAAC,QAAQ,CAACC,KAAK,CAAC,SAAS,CAACC,UAAU,CAAE,CAAEC,KAAK,CAAE,CAAEF,KAAK,CAAE,SAAU,CAAC,CAAEG,SAAS,CAAE,GAAI,CAAE,CAAC,CAAC,CAC5K,CAAC,cAEhB1C,IAAA,WAAQ2C,OAAO,CAAEf,oBAAqB,CAAAK,QAAA,cAACjC,IAAA,CAACJ,WAAW,GAAC,CAAC,CAAQ,CAAC,EAC1D,CAAC,CACP,CAAC,CAEP"},"metadata":{},"sourceType":"module","externalDependencies":[]}