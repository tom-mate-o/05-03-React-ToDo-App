{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useLocalStorage(key, initialValue, countKey) {\n  _s();\n  const [todos, setTodos] = useState(() => {\n    // useState() hook in dem die ToDos gespeichert werden\n    const storedTodos = JSON.parse(localStorage.getItem(key)); // getTodos from local storage. JSON.parse() wandelt den String in ein Array um\n    return storedTodos || initialValue; // wenn storedTodos nicht leer ist, dann gebe storedTodos zurück, sonst initialValue\n  });\n\n  const [count, setCount] = useState(() => {\n    const storedCound = JSON.parse(localStorage.getItem(countkey));\n    return storedCount || initialValue;\n  });\n  useEffect(() => {\n    // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\n    localStorage.setItem(key, JSON.stringify(todos)); //setTodos to local storage. JSON.stringify() wandelt das Array in einen String um\n    localStorage.setItem(countKey, JSON.stringify(count)); //setCount to local storage\n  }, [key, todos, count, countKey]); // key, todos, count und countKey sind die dependencies. Wenn sich diese ändern, wird useEffect() ausgeführt\n  return [todos, setTodos];\n}\n_s(useLocalStorage, \"Mv44ymfxpxLK/dWQgw5UBXsf43c=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","countKey","_s","todos","setTodos","storedTodos","JSON","parse","localStorage","getItem","count","setCount","storedCound","countkey","storedCount","setItem","stringify"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/src/components/customHooks/useLocalStorage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport default function useLocalStorage(key, initialValue, countKey) {\r\n  const [todos, setTodos] = useState(() => { // useState() hook in dem die ToDos gespeichert werden\r\n    const storedTodos = JSON.parse(localStorage.getItem(key)); // getTodos from local storage. JSON.parse() wandelt den String in ein Array um\r\n    return storedTodos || initialValue; // wenn storedTodos nicht leer ist, dann gebe storedTodos zurück, sonst initialValue\r\n  }); \r\n\r\n  const [count, setCount] = useState(()=>{\r\n    const storedCound = JSON.parse(localStorage.getItem(countkey));\r\n    return storedCount || initialValue;\r\n  });\r\n\r\n\r\n  useEffect(() => { // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\r\n    localStorage.setItem(key, JSON.stringify(todos)); //setTodos to local storage. JSON.stringify() wandelt das Array in einen String um\r\n    localStorage.setItem(countKey, JSON.stringify(count)); //setCount to local storage\r\n  }, [key, todos, count, countKey]); // key, todos, count und countKey sind die dependencies. Wenn sich diese ändern, wird useEffect() ausgeführt\r\n  return [todos, setTodos];\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAEC,QAAQ,EAAE;EAAAC,EAAA;EACnE,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,MAAM;IAAE;IACzC,MAAMS,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACV,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,OAAOM,WAAW,IAAIL,YAAY,CAAC,CAAC;EACtC,CAAC,CAAC;;EAEF,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAAC,MAAI;IACrC,MAAMgB,WAAW,GAAGN,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAACI,QAAQ,CAAC,CAAC;IAC9D,OAAOC,WAAW,IAAId,YAAY;EACpC,CAAC,CAAC;EAGFH,SAAS,CAAC,MAAM;IAAE;IAChBW,YAAY,CAACO,OAAO,CAAChB,GAAG,EAAEO,IAAI,CAACU,SAAS,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC;IAClDK,YAAY,CAACO,OAAO,CAACd,QAAQ,EAAEK,IAAI,CAACU,SAAS,CAACN,KAAK,CAAC,CAAC,CAAC,CAAC;EACzD,CAAC,EAAE,CAACX,GAAG,EAAEI,KAAK,EAAEO,KAAK,EAAET,QAAQ,CAAC,CAAC,CAAC,CAAC;EACnC,OAAO,CAACE,KAAK,EAAEC,QAAQ,CAAC;AAC1B;AAACF,EAAA,CAjBuBJ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}