{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport default function useLocalStorage(key, initialValue) {\n  _s();\n  const [todos, setTodos] = useState(initialValue); // useState() hook in dem die ToDos gespeichert werden\n\n  useEffect(() => {\n    // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\n    const storedTodos = JSON.parse(localStorage.getItem(\"key\")); // getTodos from local storage\n    if (storedTodos) {\n      // wenn storedTodos nicht leer ist, dann\n      setTodos(storedTodos); // füge die ToDos aus dem local storage in das Array ein (setTodos)\n    }\n  }, [key]); // [key]] ist das Array, das useEffect() überwacht. Wenn sich die ToDos ändern, dann wird useEffect() ausgeführt\n\n  useEffect(() => {\n    // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\n    localStorage.setItem(\"key\", JSON.stringify(todos)); //setTodos to local storage\n  }, [todos, setTodos]);\n  return [todos, setTodos];\n}\n_s(useLocalStorage, \"a24ZP1nZyWR81Xye36hEgl8NWaM=\");","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","initialValue","_s","todos","setTodos","storedTodos","JSON","parse","localStorage","getItem","setItem","stringify"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/src/components/customHooks/useLocalStorage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const [todos, setTodos] = useState(initialValue); // useState() hook in dem die ToDos gespeichert werden\r\n\r\n\r\nuseEffect(() => { // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\r\n    const storedTodos = JSON.parse(localStorage.getItem(\"key\")); // getTodos from local storage\r\n    if (storedTodos) { // wenn storedTodos nicht leer ist, dann\r\n      setTodos(storedTodos); // füge die ToDos aus dem local storage in das Array ein (setTodos)\r\n    }\r\n  }, [key]); // [key]] ist das Array, das useEffect() überwacht. Wenn sich die ToDos ändern, dann wird useEffect() ausgeführt\r\n\r\n  useEffect(() => { // useEffect() hook wird ausgeführt, wenn sich die ToDos ändern\r\n    localStorage.setItem(\"key\", JSON.stringify(todos)); //setTodos to local storage\r\n  }, [todos, setTodos]);\r\n\r\n  return [todos, setTodos];\r\n}\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,eAAe,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACzD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAACI,YAAY,CAAC,CAAC,CAAC;;EAGpDH,SAAS,CAAC,MAAM;IAAE;IACd,MAAMO,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC7D,IAAIJ,WAAW,EAAE;MAAE;MACjBD,QAAQ,CAACC,WAAW,CAAC,CAAC,CAAC;IACzB;EACF,CAAC,EAAE,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC;;EAEXF,SAAS,CAAC,MAAM;IAAE;IAChBU,YAAY,CAACE,OAAO,CAAC,KAAK,EAAEJ,IAAI,CAACK,SAAS,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;EACtD,CAAC,EAAE,CAACA,KAAK,EAAEC,QAAQ,CAAC,CAAC;EAErB,OAAO,CAACD,KAAK,EAAEC,QAAQ,CAAC;AAC1B;AAACF,EAAA,CAhBuBH,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}