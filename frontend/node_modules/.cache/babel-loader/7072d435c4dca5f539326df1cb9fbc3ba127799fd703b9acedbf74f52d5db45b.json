{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\OneDrive\\\\Dokumente\\\\GitHub\\\\_Fullstack-2023-2_meineProjekte\\\\0503todoapp\\\\todoapp\\\\frontend\\\\src\\\\components\\\\takeInputvalueAndReturn.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport TextField from \"@mui/material/TextField\";\nimport AddTaskIcon from '@mui/icons-material/AddTask';\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { PinkButton } from \"../styled/PinkButton\";\nimport { Inputfield } from \"../styled/InputFieldWrap\";\nimport { addTodoToDatabase } from \"../utils/addTodoToDatabase\";\nimport { addTodoListToDatabase } from \"../utils/addTodoListToDatabase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: \"#ff79c6\"\n    },\n    text: {\n      primary: \"#ffff\",\n      secondary: \"#ffff\"\n    }\n  }\n});\nexport default function InputAndReturn({\n  todos,\n  setTodos\n}) {\n  _s();\n  // variable todoTextRef mit useRef()-hook erstellen\n  const todoTextRef = useRef();\n\n  // function InputValueToToDoList(){\n  //   const newTodo = todoTextRef.current.value;\n  //   if (newTodo.trim() !== \"\") { // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\n  //     const todoData = {\n  //       todo: newTodo, // Das JSON-Format für den Request-Body\n  //     };  \n  //     setTodos([...todos, newTodo]); // Füge das neue To-Do dem bestehenden Array [...todos] hinzu\n  //     localStorage.setItem(\"todos\", JSON.stringify([...todos, newTodo])); //setTodos to local storage\n  //     addTodoToDatabase(todoData); // fügt das neue ToDo der MongoDB-Datenbank hinzu\n  //     localStorage.setItem(\"todosCount\", JSON.stringify(todos.length + 1)); //zählt die ToDos und setzt den Wert in todosCount im local storage\n  //     todoTextRef.current.value = \"\"; // textfeld danach wieder leeren\n  //   }\n  // }\n\n  function InputValueToToDoList() {\n    const newTodo = todoTextRef.current.value;\n    if (newTodo.trim() !== \"\") {\n      // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\n      const updDatedTodos = [...todos, newTodo];\n      setTodos(updDatedTodos); // Füge das neue To-Do dem bestehenden Array [...todos] hinzu\n      localStorage.setItem(\"todos\", JSON.stringify(updDatedTodos)); //setTodos to local storage\n\n      addTodoListToDatabase(updDatedTodos); // fügt das neue ToDo der MongoDB-Datenbank hinzu\n      localStorage.setItem(\"todosCount\", JSON.stringify(todos.length + 1)); //zählt die ToDos und setzt den Wert in todosCount im local storage\n      todoTextRef.current.value = \"\"; // textfeld danach wieder leeren\n    }\n  }\n\n  // clickButtonThenInput() function bei Button onClick\n  function clickButtonThenInput(e) {\n    // wird mit event ausgeführt.\n    e.preventDefault(); // e.preventDefault() verhindert, dass die Seite neu geladen wird\n    console.log(\"click\");\n    // console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\n    console.log(todoTextRef.current.value);\n    InputValueToToDoList();\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Inputfield, {\n      className: \"inputField\",\n      children: [/*#__PURE__*/_jsxDEV(ThemeProvider, {\n        theme: theme,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          inputRef: todoTextRef,\n          className: \"input\",\n          id: \"filled-basic\",\n          label: \"Add ToDo...\",\n          variant: \"filled\",\n          color: \"primary\",\n          inputProps: {\n            style: {\n              color: \"#ff79c6\"\n            },\n            maxLength: 100\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(PinkButton, {\n        onClick: clickButtonThenInput,\n        children: /*#__PURE__*/_jsxDEV(AddTaskIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 52\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(InputAndReturn, \"k5i9kRJXulbx+J272MHN3NZYeu0=\");\n_c = InputAndReturn;\nvar _c;\n$RefreshReg$(_c, \"InputAndReturn\");","map":{"version":3,"names":["React","useRef","TextField","AddTaskIcon","createTheme","ThemeProvider","PinkButton","Inputfield","addTodoToDatabase","addTodoListToDatabase","jsxDEV","_jsxDEV","Fragment","_Fragment","theme","palette","primary","main","text","secondary","InputAndReturn","todos","setTodos","_s","todoTextRef","InputValueToToDoList","newTodo","current","value","trim","updDatedTodos","localStorage","setItem","JSON","stringify","length","clickButtonThenInput","e","preventDefault","console","log","children","className","inputRef","id","label","variant","color","inputProps","style","maxLength","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/todoapp/frontend/src/components/takeInputvalueAndReturn.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport AddTaskIcon from '@mui/icons-material/AddTask';\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport { PinkButton } from \"../styled/PinkButton\";\r\nimport { Inputfield } from \"../styled/InputFieldWrap\";\r\nimport { addTodoToDatabase } from \"../utils/addTodoToDatabase\";\r\nimport { addTodoListToDatabase } from \"../utils/addTodoListToDatabase\";\r\n\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    primary: {\r\n      main: \"#ff79c6\",\r\n    },\r\n    text: {\r\n      primary: \"#ffff\",\r\n      secondary: \"#ffff\",\r\n    },\r\n  },\r\n});\r\n\r\nexport default function InputAndReturn({todos, setTodos}) {\r\n  // variable todoTextRef mit useRef()-hook erstellen\r\n  const todoTextRef = useRef();\r\n\r\n  // function InputValueToToDoList(){\r\n  //   const newTodo = todoTextRef.current.value;\r\n  //   if (newTodo.trim() !== \"\") { // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\r\n  //     const todoData = {\r\n  //       todo: newTodo, // Das JSON-Format für den Request-Body\r\n  //     };  \r\n  //     setTodos([...todos, newTodo]); // Füge das neue To-Do dem bestehenden Array [...todos] hinzu\r\n  //     localStorage.setItem(\"todos\", JSON.stringify([...todos, newTodo])); //setTodos to local storage\r\n  //     addTodoToDatabase(todoData); // fügt das neue ToDo der MongoDB-Datenbank hinzu\r\n  //     localStorage.setItem(\"todosCount\", JSON.stringify(todos.length + 1)); //zählt die ToDos und setzt den Wert in todosCount im local storage\r\n  //     todoTextRef.current.value = \"\"; // textfeld danach wieder leeren\r\n  //   }\r\n  // }\r\n\r\n\r\n    function InputValueToToDoList(){\r\n    const newTodo = todoTextRef.current.value;\r\n    if (newTodo.trim() !== \"\") { // Nur wenn das Eingabefeld nicht leer ist, füge das To-Do hinzu\r\n      const updDatedTodos = [...todos, newTodo];\r\n      setTodos(updDatedTodos); // Füge das neue To-Do dem bestehenden Array [...todos] hinzu\r\n      localStorage.setItem(\"todos\", JSON.stringify(updDatedTodos)); //setTodos to local storage\r\n\r\n      addTodoListToDatabase(updDatedTodos); // fügt das neue ToDo der MongoDB-Datenbank hinzu\r\n      localStorage.setItem(\"todosCount\", JSON.stringify(todos.length + 1)); //zählt die ToDos und setzt den Wert in todosCount im local storage\r\n      todoTextRef.current.value = \"\"; // textfeld danach wieder leeren\r\n    }\r\n  }\r\n\r\n\r\n\r\n  // clickButtonThenInput() function bei Button onClick\r\n  function clickButtonThenInput(e) {  // wird mit event ausgeführt.\r\n    e.preventDefault(); // e.preventDefault() verhindert, dass die Seite neu geladen wird\r\n    console.log(\"click\");\r\n    // console.log(todoTextRef) greift auf den Wet des Textfields zu (durch den refHook inputRef={todoTextRef})\r\n    console.log(todoTextRef.current.value);\r\n    \r\n    InputValueToToDoList();\r\n  \r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Inputfield className=\"inputField\">\r\n        <ThemeProvider theme={theme}>\r\n          {/* ref hook todoTextRef im Textfield */}\r\n          <TextField inputRef={todoTextRef} className=\"input\" id=\"filled-basic\" label=\"Add ToDo...\" variant=\"filled\" color=\"primary\" inputProps={{ style: { color: \"#ff79c6\" }, maxLength: 100 }}/>\r\n        </ThemeProvider>\r\n        {/* bei onClick wird clickButtonThenInput() ausgeführt */}\r\n        <PinkButton onClick={clickButtonThenInput}><AddTaskIcon/></PinkButton>\r\n      </Inputfield>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}