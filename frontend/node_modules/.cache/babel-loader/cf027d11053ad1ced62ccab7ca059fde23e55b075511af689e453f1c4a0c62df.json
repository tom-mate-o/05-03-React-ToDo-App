{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\thoma\\\\OneDrive\\\\Dokumente\\\\GitHub\\\\_Fullstack-2023-2_meineProjekte\\\\0503todoapp\\\\todoapp\\\\frontend\\\\src\\\\components\\\\createAppContainer.jsx\",\n  _s = $RefreshSig$();\n// createAppContainer.jsx\nimport React from 'react';\nimport ToDo from './createToDo';\nimport InputAndReturn from './takeInputvalueAndReturn';\nimport ToDoPopUp from './toDoPopUpButton';\nimport { AppContainerWrap } from '../styled/AppContainerWrap';\nimport { Title } from '../styled/Title';\nimport useMongoDBData from './customHooks/useMongoDBData';\nimport { deleteTodoFromBackend } from '../utils/deleteTodoFromBackend';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AppContainer() {\n  _s();\n  //Costum Hooks\n  const [todos, setTodos] = useMongoDBData();\n  // const [todosCount, setTodosCount] = useLocalStorage('todosCount', todos.length); // die Anzahl der todos wir aus dem LS geholt. Ist keine vorhanden wird die Länge des Arrays übergeben\n\n  const onDelete = async todoId => {\n    try {\n      await deleteTodoFromBackend(todoId);\n      setTodos([...todos.filter(todo => todo.id !== todoId)]); // das ToDo mit der ID todoId wird aus dem Array todos gefiltert und das neue Array wird mit setTodos gesetzt\n      //das das Array als State gesetzt wird, wird die Komponente neu gerendert und das gelöschte ToDo wird nicht mehr angezeigt\n      // erst bei neu laden werden die richtigen ToDos aus der Datenbank geladen. Die sollten aber das gleiche anzeigen.\n    } catch (error) {\n      console.error(\"Error deleting todo:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContainerWrap, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      children: \"ToDo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(InputAndReturn, {\n      todos: todos,\n      setTodos: setTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ToDo, {\n      todos: todos,\n      onDelete: onDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ToDoPopUp, {\n      todos: todos,\n      setTodos: setTodos\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(AppContainer, \"8ynu7be995yTKvPBb4foOyhoYts=\", false, function () {\n  return [useMongoDBData];\n});\n_c = AppContainer;\nvar _c;\n$RefreshReg$(_c, \"AppContainer\");","map":{"version":3,"names":["React","ToDo","InputAndReturn","ToDoPopUp","AppContainerWrap","Title","useMongoDBData","deleteTodoFromBackend","jsxDEV","_jsxDEV","AppContainer","_s","todos","setTodos","onDelete","todoId","filter","todo","id","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/thoma/OneDrive/Dokumente/GitHub/_Fullstack-2023-2_meineProjekte/0503todoapp/todoapp/frontend/src/components/createAppContainer.jsx"],"sourcesContent":["// createAppContainer.jsx\r\nimport React from 'react'\r\nimport ToDo from './createToDo'\r\nimport InputAndReturn from './takeInputvalueAndReturn'\r\nimport ToDoPopUp from './toDoPopUpButton'\r\nimport { AppContainerWrap } from '../styled/AppContainerWrap'\r\nimport { Title } from '../styled/Title'\r\nimport useMongoDBData from './customHooks/useMongoDBData'\r\nimport { deleteTodoFromBackend } from '../utils/deleteTodoFromBackend'\r\n\r\n\r\n\r\nexport default function AppContainer() {\r\n  //Costum Hooks\r\n  const [todos, setTodos] = useMongoDBData();\r\n  // const [todosCount, setTodosCount] = useLocalStorage('todosCount', todos.length); // die Anzahl der todos wir aus dem LS geholt. Ist keine vorhanden wird die Länge des Arrays übergeben\r\n  \r\n  const onDelete = async (todoId) => {\r\n    try {\r\n      await deleteTodoFromBackend(todoId);\r\n      setTodos([...todos.filter((todo) => todo.id !== todoId)]); // das ToDo mit der ID todoId wird aus dem Array todos gefiltert und das neue Array wird mit setTodos gesetzt\r\n      //das das Array als State gesetzt wird, wird die Komponente neu gerendert und das gelöschte ToDo wird nicht mehr angezeigt\r\n      // erst bei neu laden werden die richtigen ToDos aus der Datenbank geladen. Die sollten aber das gleiche anzeigen.\r\n    } catch (error) {\r\n      console.error(\"Error deleting todo:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppContainerWrap>\r\n    <Title>ToDo</Title>\r\n    {/* // an die Komponente InputAndReturn werden die ToDos und die Funktion zum setzen der ToDos übergeben inkl Anzahl der Todos*/}\r\n    <InputAndReturn todos={todos} setTodos={setTodos}/>\r\n    {/* // an die Komponente ToDo werden die ToDos übergeben, die diese dann anzeigt */}\r\n    {/* + Inline Function onDelete */}\r\n    <ToDo todos={todos} onDelete={onDelete}/>\r\n    <ToDoPopUp todos={todos} setTodos={setTodos} />\r\n    </AppContainerWrap>\r\n  );\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,cAAc,MAAM,2BAA2B;AACtD,OAAOC,SAAS,MAAM,mBAAmB;AACzC,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,KAAK,QAAQ,iBAAiB;AACvC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,SAASC,qBAAqB,QAAQ,gCAAgC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAItE,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,cAAc,CAAC,CAAC;EAC1C;;EAEA,MAAMQ,QAAQ,GAAG,MAAOC,MAAM,IAAK;IACjC,IAAI;MACF,MAAMR,qBAAqB,CAACQ,MAAM,CAAC;MACnCF,QAAQ,CAAC,CAAC,GAAGD,KAAK,CAACI,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKH,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;MAC3D;MACA;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC9C;EACF,CAAC;EAED,oBACEV,OAAA,CAACL,gBAAgB;IAAAiB,QAAA,gBACjBZ,OAAA,CAACJ,KAAK;MAAAgB,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAEnBhB,OAAA,CAACP,cAAc;MAACU,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAGnDhB,OAAA,CAACR,IAAI;MAACW,KAAK,EAAEA,KAAM;MAACE,QAAQ,EAAEA;IAAS;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACzChB,OAAA,CAACN,SAAS;MAACS,KAAK,EAAEA,KAAM;MAACC,QAAQ,EAAEA;IAAS;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7B,CAAC;AAEvB;AAACd,EAAA,CA3BuBD,YAAY;EAAA,QAERJ,cAAc;AAAA;AAAAoB,EAAA,GAFlBhB,YAAY;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}